import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import authService, { User as AuthUser } from '../services/authService';
import activityService from '../services/activityService';
import logger from '../utils/logger';

interface ReadmeSection {
  id: string;
  title: string;
  content: string;
  lastModified: string;
  author: string;
}

interface WikiData {
  [key: string]: {
    title: string;
    content?: string; // Pour les pages simples
    sections?: ReadmeSection[]; // Pour les pages avec sections multiples
    lastModified: string;
    author: string;
  };
}

// Utilisation de l'interface User du service d'authentification
interface User extends AuthUser {
  email?: string;
  avatar?: string;
  bio?: string;
  joinDate?: string;
  contributions?: number;
}

interface WikiContextType {
  currentPage: string;
  setCurrentPage: (page: string) => void;
  wikiData: WikiData;
  updatePage: (pageId: string, content: string) => void;
  addSection: (pageId: string, sectionTitle: string) => string; // Retourne l'ID de la nouvelle section
  addPage: (pageTitle: string) => string; // Ajouter une nouvelle page/cat√©gorie
  renamePage: (oldPageId: string, newTitle: string) => string; // Renommer une page
  deletePage: (pageId: string) => boolean; // Supprimer une page
  renameSection: (pageId: string, sectionId: string, newTitle: string) => boolean; // Renommer une section
  deleteSection: (pageId: string, sectionId: string) => boolean; // Supprimer une section
  isEditing: boolean;
  setIsEditing: (editing: boolean) => void;
  editingPage: string;
  setEditingPage: (page: string) => void;
  searchTerm: string;
  setSearchTerm: (term: string) => void;
  // √âtats d'authentification
  isLoggedIn: boolean;
  setIsLoggedIn: (loggedIn: boolean) => void;
  user: User | null;
  setUser: (user: User | null) => void;
  updateUser: (updates: Partial<User>) => Promise<void>;
  // Panel d'administration
  isAdminPanelOpen: boolean;
  setIsAdminPanelOpen: (open: boolean) => void;
  openAdminPanel: () => void;
  // Gestion des utilisateurs et permissions
  allUsers: User[];
  setAllUsers: (users: User[]) => void;
  updateUserTags: (username: string, tags: string[]) => Promise<void>;
  updateUserProfile: (userId: number, updates: Partial<User & { password?: string }>) => Promise<boolean>;
  deleteUserProfile: (userId: number) => Promise<boolean>;
  hasPermission: (requiredTag: string) => boolean;
  canContribute: () => boolean;
  isAdmin: () => boolean;
  // Th√®me
  isDarkMode: boolean;
  toggleTheme: () => void;
}

const WikiContext = createContext<WikiContextType | undefined>(undefined);

const initialWikiData: WikiData = {
  home: {
    title: "Accueil - Star Deception Wiki",
    sections: [
      {
        id: "welcome",
        title: "Bienvenue sur le Wiki Star Deception",
        content: `# Bienvenue sur le Wiki Star Deception

Star Deception est un jeu vid√©o de science-fiction captivant qui vous plonge dans un univers o√π la tromperie et la strat√©gie sont essentielles √† la survie.`,
        lastModified: "2025-01-27",
        author: "Admin"
      },
      {
        id: "about-game",
        title: "√Ä propos du jeu",
        content: `# √Ä propos du jeu

Dans Star Deception, les joueurs naviguent dans un cosmos hostile o√π chaque d√©cision peut changer le cours de l'histoire. Explorez des galaxies lointaines, rencontrez des civilisations alien, et d√©couvrez les secrets cach√©s de l'univers.`,
        lastModified: "2025-01-27",
        author: "Admin"
      },
      {
        id: "main-features",
        title: "Caract√©ristiques principales",
        content: `# Caract√©ristiques principales

- **Gameplay strat√©gique** : Chaque d√©cision compte
- **Univers riche** : Des dizaines de plan√®tes √† explorer
- **Personnages complexes** : Des alli√©s et ennemis m√©morables
- **Histoire immersive** : Une narration profonde et engageante

Explorez les diff√©rentes sections de ce wiki pour d√©couvrir tous les secrets de Star Deception !`,
        lastModified: "2025-01-27",
        author: "Admin"
      }
    ],
    lastModified: "2025-01-27",
    author: "Admin"
  },
  characters: {
    title: "Personnages",
    sections: [
      {
        id: "main-characters",
        title: "Personnages Principaux",
        content: `# Personnages Principaux

### Captain Nova Sterling
Le protagoniste principal, un commandant exp√©riment√© de la Flotte Stellaire. Nova est connu pour sa capacit√© √† prendre des d√©cisions difficiles sous pression.

**Caract√©ristiques :**
- √Çge : 34 ans
- Origine : Terre
- Sp√©cialit√© : Tactique spatiale
- Arme favorite : Blaster plasma MK-VII

### Dr. Lydia Chen
Scientifique brillante sp√©cialis√©e dans la x√©no-biologie. Elle accompagne Nova dans ses missions d'exploration.

**Caract√©ristiques :**
- √Çge : 29 ans
- Origine : Station Mars Alpha
- Sp√©cialit√© : Recherche scientifique
- √âquipement : Scanner quantique

### Commandant Zephyr
Ancien alli√© devenu rival, Zephyr repr√©sente l'une des principales menaces du jeu.

**Caract√©ristiques :**
- √Çge : 42 ans
- Origine : Inconnue
- Sp√©cialit√© : Combat rapproch√©
- Statut : Antagoniste principal`,
        lastModified: "2025-01-27",
        author: "GameMaster"
      },
      {
        id: "secondary-characters",
        title: "Personnages Secondaires",
        content: `# Personnages Secondaires

Les PNJ jouent un r√¥le crucial dans l'exp√©rience de jeu, offrant des qu√™tes, des informations et des d√©fis uniques.`,
        lastModified: "2025-01-27",
        author: "GameMaster"
      }
    ],
    lastModified: "2025-01-27",
    author: "GameMaster"
  },
  gameplay: {
    title: "Gameplay",
    sections: [
      {
        id: "combat-system",
        title: "Syst√®me de Combat",
        content: `# Syst√®me de Combat

Le combat dans Star Deception combine strat√©gie et action en temps r√©el.

## Combat Spatial
Pilotez votre vaisseau dans des batailles √©piques contre d'autres joueurs ou des flottes aliens.

### M√©caniques cl√©s :
- **Man≈ìuvres √©vasives** : Esquivez les tirs ennemis avec des mouvements pr√©cis
- **Syst√®mes d'armement** : Lasers, missiles, torpilles √† plasma
- **Boucliers √©nerg√©tiques** : G√©rez votre √©nergie entre attaque et d√©fense
- **Ciblage tactique** : Visez les points faibles des vaisseaux ennemis

## Combat au Sol
Affrontements tactiques sur les plan√®tes avec votre √©quipage.

### Caract√©ristiques :
- **Syst√®me de couverture** : Utilisez l'environnement √† votre avantage
- **√âquipes tactiques** : Coordonnez vos compagnons d'√©quipe
- **Armes vari√©es** : Du pistolet laser au canon √† plasma lourd
- **Environnements destructibles** : Cr√©ez vos propres couverts`,
        lastModified: "2025-08-05",
        author: "CombatExpert"
      },
      {
        id: "exploration",
        title: "Exploration et D√©couverte",
        content: `# Exploration et D√©couverte

L'exploration est au c≈ìur de l'exp√©rience Star Deception.

## Plan√®tes Proc√©durales
Chaque monde est g√©n√©r√© de mani√®re unique avec ses propres biomes et secrets.

### Types de plan√®tes :
- **Mondes d√©sertiques** : Vastes √©tendues sablonneuses avec oasis cach√©es
- **Plan√®tes oc√©aniques** : Archipels flottants et cit√©s sous-marines
- **Stations spatiales abandonn√©es** : Myst√®res technologiques √† d√©couvrir
- **Zones interdites** : R√©gions dangereuses avec r√©compenses exceptionnelles

## Ressources et Collecte
- **Minerais rares** : N√©cessaires pour am√©liorer votre √©quipement
- **Technologies alien** : Artefacts myst√©rieux aux pouvoirs inconnus
- **Donn√©es historiques** : Reconstituez l'histoire de civilisations perdues
- **Cr√©dits galactiques** : La monnaie universelle pour le commerce

## D√©couvertes Cach√©es
- **Temples anciens** : Structures myst√©rieuses laiss√©es par des civilisations disparues
- **Portails dimensionnels** : Raccourcis vers des syst√®mes √©loign√©s
- **√âpaves de vaisseaux** : Vestiges de batailles pass√©es contenant des tr√©sors`,
        lastModified: "2025-08-05",
        author: "ExplorerPro"
      },
      {
        id: "progression",
        title: "Progression du Personnage",
        content: `# Progression du Personnage

D√©veloppez votre personnage et votre √©quipement au fil de vos aventures.

## Syst√®me de Niveaux
Gagnez de l'exp√©rience en explorant, combattant et accomplissant des missions.

### Sources d'exp√©rience :
- **Exploration** : D√©couverte de nouveaux lieux (+50-200 XP)
- **Combat** : Victoires contre ennemis (+25-100 XP par ennemi)
- **Missions** : Compl√©tion d'objectifs (+100-500 XP)
- **D√©couvertes** : Artefacts et secrets (+75-300 XP)

## Arbres de Comp√©tences
Trois branches principales √† d√©velopper :

### üöÄ Pilotage
- **Man≈ìuvres avanc√©es** : Mouvements √©vasifs am√©lior√©s
- **Efficacit√© √©nerg√©tique** : Consommation r√©duite des syst√®mes
- **Ciblage de pr√©cision** : Am√©lioration de la pr√©cision des tirs

### üî¨ Science
- **Analyse alien** : D√©chiffrage plus rapide des technologies
- **R√©parations d'urgence** : Soins rapides en combat
- **Recherche avanc√©e** : D√©couverte de nouveaux √©quipements

### ‚öîÔ∏è Combat
- **Expertise martiale** : D√©g√¢ts au corps √† corps augment√©s
- **Tactiques d'√©quipe** : Bonus pour les compagnons
- **R√©sistance** : Points de vie et armure am√©lior√©s`,
        lastModified: "2025-08-05",
        author: "GameMaster"
      },
      {
        id: "multiplayer",
        title: "Modes Multijoueur",
        content: `# Modes Multijoueur

Star Deception offre plusieurs fa√ßons de jouer avec d'autres joueurs.

## Coop√©ration
Explorez l'univers avec vos amis dans des missions coop√©ratives.

### Fonctionnalit√©s coop :
- **√âquipages partag√©s** : Jusqu'√† 4 joueurs par vaisseau
- **Missions d'√©quipe** : Objectifs n√©cessitant la coop√©ration
- **Partage de ressources** : √âconomie commune pour l'√©quipe
- **Communication int√©gr√©e** : Chat vocal et textuel

## PvP (Joueur contre Joueur)
Affrontez d'autres capitaines dans des batailles intenses.

### Modes PvP :
- **Duels spatiaux** : Combats 1v1 dans l'espace
- **Batailles de flotte** : Affrontements massifs jusqu'√† 20v20
- **Contr√¥le de territoire** : Capturez et d√©fendez des syst√®mes stellaires
- **Tournois** : Comp√©titions organis√©es avec r√©compenses

## Guildes et Alliances
Rejoignez ou cr√©ez des organisations de joueurs.

### Avantages des guildes :
- **Base partag√©e** : Station spatiale commune
- **Missions de guilde** : Objectifs √† long terme
- **Commerce interne** : March√© priv√© entre membres
- **Classements** : Comp√©tition entre guildes`,
        lastModified: "2025-08-05",
        author: "MultiplayerDev"
      }
    ],
    lastModified: "2025-08-05",
    author: "GameDesignTeam"
  },
  story: {
    title: "Histoire",
    sections: [
      {
        id: "context",
        title: "Contexte",
        content: `# Contexte

L'ann√©e 2387, l'humanit√© a colonis√© plus de 200 syst√®mes stellaires. Mais une d√©couverte bouleversante va changer le cours de l'histoire...`,
        lastModified: "2025-01-27",
        author: "StoryWriter"
      },
      {
        id: "act-1",
        title: "Acte I : La D√©couverte",
        content: `# Acte I : La D√©couverte

Tout commence lorsque Captain Nova Sterling d√©couvre un signal myst√©rieux provenant des confins de la galaxie. Ce signal semble contenir des informations sur une civilisation ancienne disparue depuis des mill√©naires.

### Chapitres principaux :
1. **Premier Contact** - La d√©couverte du signal
2. **L'Exp√©dition** - Formation de l'√©quipe d'exploration
3. **Secrets Cach√©s** - Premi√®res r√©v√©lations troublantes`,
        lastModified: "2025-01-27",
        author: "StoryWriter"
      },
      {
        id: "act-2",
        title: "Acte II : La R√©v√©lation",
        content: `# Acte II : La R√©v√©lation

L'√©quipe d√©couvre que cette civilisation ancienne avait d√©velopp√© une technologie capable de manipuler la r√©alit√© elle-m√™me. Mais cette d√©couverte attire l'attention d'ennemis redoutables.

### Chapitres principaux :
4. **La Technologie Perdue** - D√©couverte des artefacts
5. **Trahison** - Un alli√© r√©v√®le sa vraie nature
6. **La Fuite** - √âchapper aux forces ennemies`,
        lastModified: "2025-01-27",
        author: "StoryWriter"
      },
      {
        id: "act-3",
        title: "Acte III : La Confrontation finale",
        content: `# Acte III : La Confrontation finale

Nova et son √©quipe doivent emp√™cher que cette technologie tombe entre de mauvaises mains, m√™me si cela signifie affronter leurs propres d√©mons.

### Chapitres principaux :
7. **Pr√©paratifs** - Rassembler les alli√©s
8. **La Bataille finale** - Confrontation √©pique
9. **√âpilogue** - Les cons√©quences des choix du joueur`,
        lastModified: "2025-01-27",
        author: "StoryWriter"
      }
    ],
    lastModified: "2025-01-27",
    author: "StoryWriter"
  },
  items: {
    title: "Objets et √âquipements",
    sections: [
      {
        id: "weapons",
        title: "Armes et Armements",
        content: `# Armes et Armements

## Armes Primaires

### Blaster Plasma MK-VII
L'arme standard de la Flotte Stellaire, fiable et efficace.

**Caract√©ristiques :**
- **D√©g√¢ts :** 45-60 points
- **Port√©e :** Moyenne (150m)
- **Cadence :** Rapide (3 tirs/seconde)
- **√ânergie :** 15% par tir
- **Sp√©cial :** Mode surcharge (+50% d√©g√¢ts, consomme 40% √©nergie)

### Fusil √† Ions Quantique
Arme de pr√©cision utilisant la technologie quantique avanc√©e.

**Caract√©ristiques :**
- **D√©g√¢ts :** 80-120 points
- **Port√©e :** Longue (300m)
- **Cadence :** Lente (1 tir/2 secondes)
- **√ânergie :** 35% par tir
- **Sp√©cial :** Ignore les boucliers √©nerg√©tiques

## Armes Secondaires

### Grenades Plasma
Explosifs √† √©nergie plasma pour contr√¥le de zone.

**Effets :**
- **D√©g√¢ts initiaux :** 75-100 points
- **Zone d'effet :** Rayon de 5 m√®tres
- **Effet br√ªlure :** 10 points/seconde pendant 5 secondes
- **Quantit√© max :** 6 grenades

### Mines √âlectromagn√©tiques
Pi√®ges d√©fensifs pour s√©curiser une zone.

**Propri√©t√©s :**
- **Activation :** D√©tection de mouvement
- **D√©g√¢ts :** 150 points + paralysie 3 secondes
- **Port√©e d√©tection :** 8 m√®tres
- **Dur√©e de vie :** 5 minutes`,
        lastModified: "2025-08-05",
        author: "WeaponExpert"
      },
      {
        id: "equipment",
        title: "√âquipements D√©fensifs",
        content: `# √âquipements D√©fensifs

## Boucliers √ânerg√©tiques

### Bouclier Personnel Standard
Le bouclier de base fourni √† tous les explorateurs.

**Sp√©cifications :**
- **Protection :** 100 points de bouclier
- **R√©g√©n√©ration :** 5 points/seconde (apr√®s 3 sec sans d√©g√¢t)
- **R√©sistance :** +25% contre d√©g√¢ts √©nerg√©tiques
- **Poids :** 2.5 kg
- **Autonomie :** 4 heures d'utilisation continue

### Bouclier Adaptatif Alien
Technologie alien r√©cup√©r√©e et reverse-engineered.

**Capacit√©s avanc√©es :**
- **Protection :** 150 points de bouclier
- **R√©g√©n√©ration :** 8 points/seconde (apr√®s 2 sec sans d√©g√¢t)
- **Adaptation :** +15% r√©sistance au type de d√©g√¢t le plus re√ßu
- **Absorption :** Convertit 10% des d√©g√¢ts re√ßus en √©nergie
- **Raret√© :** Tr√®s rare, trouv√© dans les ruines aliens

## Armures

### Exo-Combinaison Spatiale
Protection standard contre les environnements hostiles.

**Protection :**
- **Armure physique :** 25 points
- **Survie spatiale :** 2 heures d'oxyg√®ne
- **R√©gulation thermique :** -50¬∞C √† +80¬∞C
- **Radiation :** Protection contre radiations faibles

### Armure de Combat Lourde
√âquipement militaire pour les missions dangereuses.

**Avantages :**
- **Armure physique :** 75 points
- **R√©duction d√©g√¢ts :** -20% tous d√©g√¢ts physiques
- **Syst√®me d'arme int√©gr√© :** Lance-grenades d'√©paule
- **Inconv√©nient :** -30% vitesse de d√©placement`,
        lastModified: "2025-08-05",
        author: "DefenseSpecialist"
      }
    ],
    lastModified: "2025-08-05",
    author: "EquipmentTeam"
  },
  locations: {
    title: "Lieux",
    sections: [
      {
        id: "stellar-systems",
        title: "Syst√®mes Stellaires",
        content: `# Syst√®mes Stellaires

### Syst√®me Sol (Syst√®me de d√©part)

**Terre**
- Population : 12 milliards
- Gouvernement : F√©d√©ration Terrienne
- Particularit√©s : Plan√®te d'origine de l'humanit√©
- Lieux d'int√©r√™t : Acad√©mie Spatiale, Centre de Commandement

**Mars**
- Population : 800 millions
- Gouvernement : Colonie autonome
- Particularit√©s : Centre industriel majeur
- Lieux d'int√©r√™t : Usines de vaisseaux, Mines de fer

### Syst√®me Alpha Centauri

**Proxima Centauri b**
- Population : 50 millions
- Environnement : Plan√®te d√©sertique avec oasis
- Particularit√©s : Premi√®re colonie extra-solaire
- Dangers : Temp√™tes de sable, cr√©atures hostiles

### Syst√®me Kepler-442

**Kepler-442b (Nouvelle Eden)**
- Population : 200 millions
- Environnement : Plan√®te jungle luxuriante
- Particularit√©s : Biodiversit√© exceptionnelle
- Lieux secrets : Temples aliens cach√©s`,
        lastModified: "2025-01-27",
        author: "Explorer"
      },
      {
        id: "space-stations",
        title: "Stations Spatiales",
        content: `# Stations Spatiales

### Station Nexus Alpha
- Type : Station commerciale
- Population : 2 millions
- Fonction : Centre de commerce intergalactique
- Services : March√©, R√©parations, Informations

### Avant-poste Omega
- Type : Base militaire
- Population : 50 000
- Fonction : Surveillance des fronti√®res
- Particularit√©s : Technologie de pointe`,
        lastModified: "2025-01-27",
        author: "Explorer"
      },
      {
        id: "mysterious-places",
        title: "Lieux Myst√©rieux",
        content: `# Lieux Myst√©rieux

### La N√©buleuse √âmeraude
- Type : Ph√©nom√®ne spatial
- Dangers : Radiations, Anomalies temporelles
- Secrets : Ruines d'une civilisation ancienne

### Le Vide Silencieux
- Type : R√©gion d'espace vide
- Particularit√©s : Communications impossibles
- Myst√®re : Disparitions inexpliqu√©es de vaisseaux`,
        lastModified: "2025-01-27",
        author: "Explorer"
      }
    ],
    lastModified: "2025-01-27",
    author: "Explorer"
  },
  development: {
    title: "D√©veloppement Open Source",
    sections: [
      {
        id: "github-organization",
        title: "Organisation GitHub StarDeception",
        content: `# üåå D√©veloppement de Star Deception

## Organisation GitHub StarDeception

Star Deception est un projet de jeu **100% open source** d√©velopp√© de mani√®re collaborative et transparente. Toute l'organisation du d√©veloppement est accessible publiquement sur GitHub.

üîó **[Organisation StarDeception sur GitHub](https://github.com/orgs/StarDeception/)**`,
        lastModified: "2025-08-05",
        author: "DevTeam"
      },
      {
        id: "project-vision",
        title: "üéØ Vision du Projet",
        content: `# üéØ Vision du Projet

Star Deception est un **MMO spatial immersif et communautaire** qui vise √† offrir une alternative ind√©pendante aux grands titres du genre. Le projet est construit **par et pour les passionn√©s**, avec une philosophie d'ouverture totale.

### Principes Fondamentaux
- üéÆ **Un vrai jeu complet**, pas seulement un bac √† sable technique
- üåç **MMO modulaire** centr√© sur la simulation, la narration, la coop√©ration et l'exploration
- üõ†Ô∏è **100% open source** ‚Äî transparent, forkable, participatif
- ü§ù **D√©veloppement communautaire**, inclusif et organique
- ü™ê **Univers vivant**, construit avec les id√©es de chacun
- üéØ **Propuls√© par Godot Engine** ‚Äî open source, flexible et communautaire`,
        lastModified: "2025-08-05",
        author: "DevTeam"
      },
      {
        id: "repositories",
        title: "üìÇ Repositories Principaux",
        content: `# üìÇ Repositories Principaux

### [StarDeception/StarDeception](https://github.com/StarDeception/StarDeception)
üè∑Ô∏è **Repository principal du jeu**
- **Langage :** GDScript (Godot Engine)
- **Stars :** ‚≠ê 19
- **Licence :** MIT
- **Statut :** Activement d√©velopp√©
- **Description :** Code source principal du jeu Star Deception

### [StarDeception/SDO](https://github.com/StarDeception/SDO)
üè∑Ô∏è **StarDeception Orchestrator**
- **Fonction :** Orchestrateur du projet
- **Stars :** ‚≠ê 1
- **Statut :** En d√©veloppement
- **Description :** Syst√®me de coordination et d'orchestration pour le d√©veloppement

### [StarDeception/Lore](https://github.com/StarDeception/Lore)
üè∑Ô∏è **Univers et Histoire**
- **Langage :** Makefile
- **Licence :** CC0-1.0 (Domaine public)
- **Stars :** ‚≠ê 1
- **Description :** Toute la lore et l'univers narratif de Star Deception

### [StarDeception/Plan](https://github.com/StarDeception/Plan)
üè∑Ô∏è **Roadmap et Planification**
- **Stars :** ‚≠ê 6
- **Description :** Le plan de d√©veloppement complet du jeu
- **Contenu :** Objectifs, milestones, vision √† long terme

### [StarDeception/.github](https://github.com/StarDeception/.github)
üè∑Ô∏è **Configuration de l'organisation**
- **Description :** Profil et configuration de l'organisation GitHub`,
        lastModified: "2025-08-05",
        author: "DevTeam"
      },
      {
        id: "game-features",
        title: "üéÆ √âl√©ments Cl√©s du Jeu",
        content: `# üéÆ √âl√©ments Cl√©s du Jeu

### Gameplay Vari√©
- ‚õèÔ∏è **Minage** et extraction de ressources
- üåç **Exploration** de syst√®mes stellaires
- üöõ **Transport** et commerce galactique
- üèîÔ∏è **Survie** dans des environnements hostiles
- ‚öîÔ∏è **Factions** et diplomatie interstellaire

### Univers Immersif
- üåç **Plan√®tes uniques** : d√©serts, oc√©ans, zones interdites, archipels flottants
- üé≠ **Cr√©ation de personnage** via une interface narrative jouable
- üõ∞Ô∏è **Univers persistant** avec une lore √©volutive et des intrigues cach√©es
- üì¶ **Contenu modulaire** : chaque syst√®me peut √©voluer ou √™tre ajout√© librement

## üî≠ Vision √† Long Terme

L'√©quipe de d√©veloppement vise :

- üîπ **Dizaines de syst√®mes stellaires** explorables
- üîπ **Multiples profils de joueurs** (civils, techniciens, dissidents...)
- üîπ **Milliers de joueurs connect√©s** simultan√©ment
- üîπ **Un jeu qui √©volue constamment** avec sa communaut√© ‚ù§Ô∏è`,
        lastModified: "2025-08-05",
        author: "DevTeam"
      },
      {
        id: "join-project",
        title: "üßë‚ÄçüöÄ Rejoindre le Projet",
        content: `# üßë‚ÄçüöÄ Rejoindre le Projet

**Vous √™tes :**
- üíª D√©veloppeur
- üé® Game designer
- üñºÔ∏è Illustrateur
- üéØ Artiste 3D
- üé¨ Animateur
- ‚úçÔ∏è √âcrivain
- üéµ Sound designer
- üéº Musicien
- ü§î Ou simplement curieux

**üëâ Vous √™tes les bienvenus !**

Star Deception est une aventure ouverte. **Forkez. Contribuez. R√™vons grand. Ensemble.**

## üìö Liens Utiles

- üåê [Site Web](https://stardeception.com/) *(bient√¥t disponible)*
- üí¨ [Discord Communautaire](https://discord.gg/YKKTZtuN)
- üìÇ [Tous les repositories](https://github.com/orgs/StarDeception/repositories)
- üìñ Documentation technique *(bient√¥t disponible)*
- üó∫Ô∏è Roadmap d√©taill√©e *(bient√¥t disponible)*

## ü§ù Comment Contribuer

### 1. Choisissez votre domaine
Consultez les repositories selon vos comp√©tences :
- **Code :** [StarDeception/StarDeception](https://github.com/StarDeception/StarDeception)
- **Lore :** [StarDeception/Lore](https://github.com/StarDeception/Lore)
- **Planification :** [StarDeception/Plan](https://github.com/StarDeception/Plan)

### 2. Rejoignez la communaut√©
- Rejoignez le [Discord](https://discord.gg/YKKTZtuN) pour discuter
- Consultez les issues ouvertes sur GitHub
- Participez aux discussions de design

### 3. Contribuez
- Forkez le repository qui vous int√©resse
- Cr√©ez votre branche feature
- Soumettez une Pull Request

---

> **Star Deception** ‚Äî *Un op√©ra spatial libre, construit ensemble, parmi les √©toiles.*`,
        lastModified: "2025-08-05",
        author: "DevTeam"
      }
    ],
    lastModified: "2025-08-05",
    author: "DevCommunity"
  }
};

export const WikiProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [currentPage, setCurrentPage] = useState('home');
  const [wikiData, setWikiData] = useState<WikiData>(initialWikiData);
  const [isEditing, setIsEditing] = useState(false);
  const [editingPage, setEditingPage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  
  // √âtats d'authentification
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  
  // Panel d'administration
  const [isAdminPanelOpen, setIsAdminPanelOpen] = useState(false);
  
  // √âtat des utilisateurs et permissions - maintenant synchronis√© avec authService
  const [allUsers, setAllUsers] = useState<User[]>([]);
  
  // Initialisation et synchronisation avec authService
  useEffect(() => {
    // V√©rifier si un utilisateur est d√©j√† connect√©
    const currentUser = authService.getCurrentUser();
    if (currentUser) {
      const fullUser: User = {
        ...currentUser,
        email: currentUser.email || `${currentUser.username}@stardeception.com`,
        avatar: currentUser.avatar, // Pr√©server l'avatar existant
        bio: getDefaultBio(currentUser.tags),
        joinDate: '2023-01-01',
        contributions: getDefaultContributions(currentUser.tags)
      };
      setUser(fullUser);
      setIsLoggedIn(true);
    }

    // Charger tous les utilisateurs
    loadAllUsers();
  }, []);

  const getDefaultBio = (tags: string[]): string => {
    if (tags.includes('Administrateur')) return 'Administrateur principal du wiki';
    if (tags.includes('Contributeur')) return 'Contributeur actif';
    return 'Nouveau membre';
  };

  const getDefaultContributions = (tags: string[]): number => {
    if (tags.includes('Administrateur')) return 150;
    if (tags.includes('Contributeur')) return 45;
    return 5;
  };

  const loadAllUsers = () => {
    const authUsers = authService.getAllUsers();
    const fullUsers: User[] = authUsers.map(authUser => ({
      ...authUser,
      email: `${authUser.username}@stardeception.com`,
      bio: getDefaultBio(authUser.tags),
      joinDate: '2023-01-01',
      contributions: getDefaultContributions(authUser.tags)
    }));
    setAllUsers(fullUsers);
  };
  
  // √âtat du th√®me
  const [isDarkMode, setIsDarkMode] = useState(true);

  const toggleTheme = () => {
    setIsDarkMode(prev => !prev);
  };

  const updateUser = async (updates: Partial<User>) => {
    if (user) {
      // Mettre √† jour via authService pour persister les changements
      const success = await authService.updateUser(user.id, updates);
      if (success) {
        setUser(prev => ({ ...prev!, ...updates }));
        // Recharger les utilisateurs pour mettre √† jour la liste globale
        loadAllUsers();
      }
    }
  };

  // Fonctions de gestion des permissions
  const updateUserTags = async (username: string, tags: string[]) => {
    // Trouver l'utilisateur par username et obtenir son ID
    const targetUser = allUsers.find(u => u.username === username);
    if (targetUser) {
      // Mettre √† jour dans authService
      const success = await authService.updateUserTags(targetUser.id, tags);
      if (success) {
        // Recharger les utilisateurs depuis authService
        loadAllUsers();
        
        // Si c'est l'utilisateur connect√©, mettre √† jour sa session
        if (user && user.username === username) {
          setUser(prev => prev ? { ...prev, tags } : null);
        }
      }
    }
  };

  const updateUserProfile = async (userId: number, updates: Partial<User & { password?: string }>): Promise<boolean> => {
    const success = await authService.updateUser(userId, updates);
    if (success) {
      // Recharger les utilisateurs depuis authService
      loadAllUsers();
      
      // Si c'est l'utilisateur connect√©, mettre √† jour sa session
      if (user && user.id === userId) {
        setUser(prev => prev ? { ...prev, ...updates } : null);
      }
    }
    return success;
  };

  const deleteUserProfile = async (userId: number): Promise<boolean> => {
    const success = await authService.deleteUser(userId);
    if (success) {
      // Recharger les utilisateurs depuis authService
      loadAllUsers();
      
      // Si c'est l'utilisateur connect√© qui est supprim√©, le d√©connecter
      if (user && user.id === userId) {
        authService.logout();
        setUser(null);
        setIsLoggedIn(false);
      }
    }
    return success;
  };

  const hasPermission = (requiredTag: string): boolean => {
    if (!isLoggedIn || !user) return false;
    return user.tags.includes(requiredTag) || user.tags.includes('Administrateur');
  };

  const canContribute = (): boolean => {
    return hasPermission('Contributeur');
  };

  const isAdmin = (): boolean => {
    return hasPermission('Administrateur');
  };

  // Fonction pour ouvrir le panel d'administration
  const openAdminPanel = () => {
    if (isAdmin()) {
      setIsAdminPanelOpen(true);
    }
  };

  const updatePage = (pageId: string, content: string) => {
    // Si pageId contient ":", c'est une section (format: "pageId:sectionId")
    if (pageId.includes(':')) {
      const [mainPageId, sectionId] = pageId.split(':');
      setWikiData(prev => {
        const currentPage = prev[mainPageId];
        if (currentPage?.sections) {
          const sectionToUpdate = currentPage.sections.find(s => s.id === sectionId);
          const updatedSections = currentPage.sections.map(section =>
            section.id === sectionId
              ? {
                  ...section,
                  content,
                  lastModified: new Date().toISOString().split('T')[0],
                  author: user?.username || "Contributeur"
                }
              : section
          );
          
          // Logger l'activit√© d'√©dition de section
          if (user && sectionToUpdate) {
            logger.info('‚úèÔ∏è Section modifi√©e', `"${sectionToUpdate.title}" dans "${currentPage.title}" par ${user.username}`);
            activityService.addLog({
              userId: user.id,
              username: user.username,
              action: 'edit_section',
              target: currentPage.title,
              details: `Modification de la section "${sectionToUpdate.title}"`
            });
          }
          
          return {
            ...prev,
            [mainPageId]: {
              ...currentPage,
              sections: updatedSections,
              lastModified: new Date().toISOString().split('T')[0],
            }
          };
        }
        return prev;
      });
    } else {
      // Mise √† jour normale pour les pages simples (cas rare maintenant)
      setWikiData(prev => {
        const currentPage = prev[pageId];
        
        // Logger l'activit√© d'√©dition de page
        if (user && currentPage) {
          activityService.addLog({
            userId: user.id,
            username: user.username,
            action: 'edit_page',
            target: currentPage.title,
            details: `Modification de la page "${currentPage.title}"`
          });
        }
        
        return {
          ...prev,
          [pageId]: {
            ...prev[pageId],
            content,
            lastModified: new Date().toISOString().split('T')[0],
            author: user?.username || "Contributeur"
          }
        };
      });
    }
    
    // Incr√©menter le compteur de contributions
    if (user) {
      updateUser({ contributions: (user.contributions || 0) + 1 });
    }
  };

  const addSection = (pageId: string, sectionTitle: string): string => {
    const newSectionId = `section-${Date.now()}`;
    const newSection: ReadmeSection = {
      id: newSectionId,
      title: sectionTitle,
      content: `# ${sectionTitle}\n\nContenu de la nouvelle section...`,
      lastModified: new Date().toISOString().split('T')[0],
      author: user?.username || "Contributeur"
    };

    setWikiData(prev => {
      const currentPage = prev[pageId];
      if (currentPage) {
        // Si la page n'a pas encore de sections, en cr√©er un tableau
        const sections = currentPage.sections || [];
        
        // Logger l'activit√© de cr√©ation de section
        if (user) {
          activityService.addLog({
            userId: user.id,
            username: user.username,
            action: 'create_section',
            target: currentPage.title,
            details: `Cr√©ation de la section "${sectionTitle}"`
          });
        }
        
        return {
          ...prev,
          [pageId]: {
            ...currentPage,
            sections: [...sections, newSection],
            lastModified: new Date().toISOString().split('T')[0],
          }
        };
      }
      return prev;
    });

    // Incr√©menter le compteur de contributions
    if (user) {
      updateUser({ contributions: (user.contributions || 0) + 1 });
    }

    return newSectionId;
  };

  const addPage = (pageTitle: string): string => {
    // Cr√©er un ID unique bas√© sur le titre
    const pageId = pageTitle.toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '');
    
    // V√©rifier si la page existe d√©j√†
    if (wikiData[pageId]) {
      logger.warn('‚ö†Ô∏è Page d√©j√† existante', pageTitle);
      console.warn(`La page "${pageTitle}" existe d√©j√†`);
      return pageId;
    }

    const newPage = {
      title: pageTitle,
      sections: [], // Commencer avec une page vide avec sections
      lastModified: new Date().toISOString().split('T')[0],
      author: user?.username || "Contributeur"
    };

    setWikiData(prev => ({
      ...prev,
      [pageId]: newPage
    }));

    // Incr√©menter le compteur de contributions
    if (user) {
      updateUser({ contributions: (user.contributions || 0) + 1 });
      logger.success('üìÑ Nouvelle page cr√©√©e', `"${pageTitle}" par ${user.username}`);
    }

    return pageId;
  };

  const renamePage = (oldPageId: string, newTitle: string): string => {
    // Cr√©er un nouvel ID bas√© sur le nouveau titre
    const newPageId = newTitle.toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '');
    
    // V√©rifier si la page existe
    if (!wikiData[oldPageId]) {
      console.warn(`La page "${oldPageId}" n'existe pas`);
      return oldPageId;
    }

    // V√©rifier si le nouvel ID est diff√©rent et n'existe pas d√©j√†
    if (newPageId !== oldPageId && wikiData[newPageId]) {
      console.warn(`Une page avec l'ID "${newPageId}" existe d√©j√†`);
      return oldPageId;
    }

    setWikiData(prev => {
      const updatedData = { ...prev };
      
      // Si l'ID change, cr√©er une nouvelle entr√©e et supprimer l'ancienne
      if (newPageId !== oldPageId) {
        updatedData[newPageId] = {
          ...updatedData[oldPageId],
          title: newTitle,
          lastModified: new Date().toISOString().split('T')[0],
        };
        delete updatedData[oldPageId];
      } else {
        // Si seul le titre change
        updatedData[oldPageId] = {
          ...updatedData[oldPageId],
          title: newTitle,
          lastModified: new Date().toISOString().split('T')[0],
        };
      }
      
      return updatedData;
    });

    // Si l'ID a chang√© et que c'est la page actuelle, naviguer vers le nouvel ID
    if (newPageId !== oldPageId && currentPage === oldPageId) {
      setCurrentPage(newPageId);
    }

    return newPageId;
  };

  const deletePage = (pageId: string): boolean => {
    // V√©rifier si la page existe
    if (!wikiData[pageId]) {
      console.warn(`La page "${pageId}" n'existe pas`);
      return false;
    }

    // Emp√™cher la suppression des pages essentielles
    const protectedPages = ['home', 'characters', 'gameplay', 'story', 'items', 'locations', 'development'];
    if (protectedPages.includes(pageId)) {
      console.warn(`La page "${pageId}" est prot√©g√©e et ne peut pas √™tre supprim√©e`);
      return false;
    }

    setWikiData(prev => {
      const updatedData = { ...prev };
      delete updatedData[pageId];
      return updatedData;
    });

    // Si c'est la page actuelle qui est supprim√©e, naviguer vers l'accueil
    if (currentPage === pageId) {
      setCurrentPage('home');
    }

    return true;
  };

  const renameSection = (pageId: string, sectionId: string, newTitle: string): boolean => {
    if (!wikiData[pageId]?.sections) {
      console.warn(`La page "${pageId}" n'a pas de sections`);
      return false;
    }

    setWikiData(prev => {
      const currentPage = prev[pageId];
      if (currentPage?.sections) {
        const updatedSections = currentPage.sections.map(section =>
          section.id === sectionId
            ? {
                ...section,
                title: newTitle,
                lastModified: new Date().toISOString().split('T')[0],
                author: user?.username || "Contributeur"
              }
            : section
        );

        return {
          ...prev,
          [pageId]: {
            ...currentPage,
            sections: updatedSections,
            lastModified: new Date().toISOString().split('T')[0],
          }
        };
      }
      return prev;
    });

    return true;
  };

  const deleteSection = (pageId: string, sectionId: string): boolean => {
    if (!wikiData[pageId]?.sections) {
      console.warn(`La page "${pageId}" n'a pas de sections`);
      return false;
    }

    const sections = wikiData[pageId].sections!;
    
    // Emp√™cher la suppression s'il ne reste qu'une section
    if (sections.length <= 1) {
      console.warn(`Impossible de supprimer la derni√®re section de la page "${pageId}"`);
      return false;
    }

    setWikiData(prev => {
      const currentPage = prev[pageId];
      if (currentPage?.sections) {
        const updatedSections = currentPage.sections.filter(section => section.id !== sectionId);

        return {
          ...prev,
          [pageId]: {
            ...currentPage,
            sections: updatedSections,
            lastModified: new Date().toISOString().split('T')[0],
          }
        };
      }
      return prev;
    });

    return true;
  };

  return (
    <WikiContext.Provider value={{
      currentPage,
      setCurrentPage,
      wikiData,
      updatePage,
      addSection,
      addPage,
      renamePage,
      deletePage,
      renameSection,
      deleteSection,
      isEditing,
      setIsEditing,
      editingPage,
      setEditingPage,
      searchTerm,
      setSearchTerm,
      isLoggedIn,
      setIsLoggedIn,
      user,
      setUser,
      updateUser,
      isAdminPanelOpen,
      setIsAdminPanelOpen,
      openAdminPanel,
      allUsers,
      setAllUsers,
      updateUserTags,
      updateUserProfile,
      deleteUserProfile,
      hasPermission,
      canContribute,
      isAdmin,
      isDarkMode,
      toggleTheme
    }}>
      {children}
    </WikiContext.Provider>
  );
};

export const useWiki = () => {
  const context = useContext(WikiContext);
  if (context === undefined) {
    throw new Error('useWiki must be used within a WikiProvider');
  }
  return context;
};